name: Hackathon Image Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
       - name: Install doctl
         uses: digitalocean/action-doctl@v2
         with:
           token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
           
       # Create droplet and volumes
       - name: Generate SSH keypair for droplet access
         run: |
           ssh-keygen -t rsa -f ~/.ssh/droplet-${{ github.run_id }} -P ""
           echo "SSH_KEY=$(doctl compute ssh-key import droplet-${{ github.run_id }} --public-key-file ~/.ssh/droplet-${{ github.run_id }}.pub --format=ID --no-header=true --interactive=false)" >> $GITHUB_ENV
           
       - name: Create droplet for job
         run: |
           echo "DROPLET_ID=$(doctl compute droplet create sdvimagebuilddroplet-${{ github.run_id }} --region lon1 --image ubuntu-20-04-x64 --size c-16 --ssh-keys $SSH_KEY --interactive=false --wait=true --format=ID --no-header=true)" >> $GITHUB_ENV
           
       - name: Attach volumes for sstate-cache and downloads
         run: |
           doctl compute volume-action attach 54e756f9-4403-11ed-9513-0a58ac14c02c $DROPLET_ID --interactive=false --wait=true
           doctl compute volume-action attach 4a004f2b-4403-11ed-9513-0a58ac14c02c $DROPLET_ID --interactive=false --wait=true
           
       # Run commands on droplet
       - name: Run commands on droplet
         run: |
           until ssh-keyscan `doctl compute droplet get $DROPLET_ID --format=PublicIPv4 --no-header=true --interactive=false` >> ~/.ssh/known_hosts; do
             echo 'Waiting for host to come online...'
             sleep 5
           done
           ssh -i ~/.ssh/droplet-${{ github.run_id }} -o ServerAliveInterval=60 root@`doctl compute droplet get $DROPLET_ID --format=PublicIPv4 --no-header=true --interactive=false` " \
             sleep 1m ; \
             apt-get update ; \
             apt-get install -y build-essential python3-pip python3 chrpath diffstat zstd git ; \
             pip install kas ; \
             groupadd --gid 1234 blduser ; \
             adduser --disabled-password --gecos 'Build User' blduser --uid 1234 --gid 1234 ; \
             passwd -d blduser ; \
             git clone https://github.com/benmordaunt/sdv-hackathon-cfg3.git -b main ; \
             mkdir -p sdv-hackathon-cfg3/build/sstate-cache ; \
             mkdir -p sdv-hackathon-cfg3/build/downloads ; \
             mount -o defaults,nofail,discard,noatime /dev/disk/by-id/scsi-0DO_Volume_sdv-sstate-cache sdv-hackathon-cfg3/build/sstate-cache ; \
             mount -o defaults,nofail,discard,noatime /dev/disk/by-id/scsi-0DO_Volume_sdv-downloads sdv-hackathon-cfg3/build/downloads ; \
             chown -R blduser:blduser sdv-hackathon-cfg3 ; \
             su blduser -c ' \
               cd sdv-hackathon-cfg3 ; \
               kas build meta-ewaol-hackathon/kas/machine/rpi4-hkt.yml \
             ' \
           "
       
       # Copy artifacts back to local VM and commit
       - name: 'Copy image to local VM'
         run: |
           scp -i ~/.ssh/droplet-${{ github.run_id }} root@`doctl compute droplet get $DROPLET_ID --format=PublicIPv4 --no-header=true --interactive=false`:/mnt/buildvolumetmp_3181284903/sdv-hackathon-cfg3/build/tmp_virtualization/deploy/images/raspberrypi4-64/ewaol-virtualization-image-raspberrypi4-64.rpi-sdimg .
       
       - name: 'Upload image as artifact'
         uses: actions/upload-artifact@v3
         with:
           name: hackathon-image.rpi-sdimg
           path: |
             ewaol-virtualization-image-raspberrypi4-64.rpi-sdimg
           retention-days: 30
       
       # Teardown droplet and volumes
       - name: Detach volume from droplet
         if: always()
         run: |
           doctl compute volume-action detach 54e756f9-4403-11ed-9513-0a58ac14c02c $DROPLET_ID --interactive=false --wait=true
           doctl compute volume-action detach 4a004f2b-4403-11ed-9513-0a58ac14c02c $DROPLET_ID --interactive=false --wait=true
           
       - name: Delete droplet
         if: always()
         run: |
           doctl compute droplet delete $DROPLET_ID --interactive=false --force
           
